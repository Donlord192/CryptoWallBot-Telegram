const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// API Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
const cryptoAPIEndpoint = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,tether,ethereum-classic,solana,tron,litecoin,ton-crystal&vs_currencies=usd';

const token = '6516910330:AAHWl3iIVa5FMj8m2VMh3I7AZV6eZORAH84';
const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', {
    reply_markup: {
      keyboard: [
        [{ text: '–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Çüíπ' }],
        [{ text: '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—èüí∞' }]
      ],
      resize_keyboard: true,
    },
  });
});

bot.onText(/–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—èüí∞/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ (USDT TRC20) –Ω–∞ –∞–¥—Ä–µ—Å: TDkMqnph4VWzgcEL3i5V4PJqWJ3hTbWuR6');
});

bot.onText(/–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Çüíπ/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const response = await axios.get(cryptoAPIEndpoint);
    const cryptoData = response.data;
    let message = 'üíπ–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Çüíπ:\n\n';

    if (cryptoData.bitcoin) {
      message += `<a href="https://bitcoin.org/">üü†BTC</a> (Bitcoin): $${cryptoData.bitcoin.usd}\n\n`;
    }
    if (cryptoData.ethereum) {
      message += `<a href="https://ethereum.org/">üî∑ETH</a> (Ethereum): $${cryptoData.ethereum.usd}\n\n`;
    }
    if (cryptoData.tether) {
      message += `<a href="https://tether.to/">üü¢USDT</a> (Tether): $${cryptoData.tether.usd}\n\n`;
    }
    if (cryptoData['ethereum-classic']) {
      message += `<a href="https://ethereumclassic.org/">üü£ETC</a> (Ethereum Classic): $${cryptoData['ethereum-classic'].usd}\n\n`;
    }
    if (cryptoData.solana) {
      message += `<a href="https://solana.com/">üü°SOL</a> (Solana): $${cryptoData.solana.usd}\n\n`;
    }
    if (cryptoData.tron) {
      message += `<a href="https://tron.network/">üî¥TRX</a> (TRON): $${cryptoData.tron.usd}\n\n`;
    }
    if (cryptoData.litecoin) {
      message += `<a href="https://litecoin.org/">üîµLTC</a> (Litecoin): $${cryptoData.litecoin.usd}\n\n`;
    }

    bot.sendMessage(chatId, message, { parse_mode: 'HTML', disable_web_page_preview: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});